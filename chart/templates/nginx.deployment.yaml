apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microengine-webhooks-py.fullname" . }}-nginx
  labels:
    {{- include "microengine-webhooks-py.nginx.labels" . | nindent 4 }}
spec:
{{- if not .Values.nginx.autoscaling.enabled }}
  replicas: {{ .Values.nginx.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "microengine-webhooks-py.nginx.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.nginx.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "microengine-webhooks-py.nginx.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nginx.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "microengine-webhooks-py.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.nginx.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.nginx.securityContext | nindent 12 }}
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          env:
          - name: PYTHONUNBUFFERED
            value: "1"
          - name: CELERY_BROKER_URL
            valueFrom:
              secretKeyRef:
                name: {{ template "microengine-webhooks-py.fullname" . }}
                key: CELERY_BROKER_URL
          - name: WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ template "microengine-webhooks-py.fullname" . }}
                key: WEBHOOK_SECRET
          - name: LOG_LEVEL
            value: {{ .Values.nginx.logLevel }}
          - name: LOG_FORMAT
            value: {{ .Values.nginx.logFormat }}
          ports:
            - name: http
              containerPort: {{ .Values.nginx.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      {{- with .Values.nginx.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nginx.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nginx.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
